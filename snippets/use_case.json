{
    "Create a BaseFutureUseCase": {
        "prefix": "fuck",
        "body": [
            "import 'package:freezed_annotation/freezed_annotation.dart';",
            "import 'package:injectable/injectable.dart';",
            "",
            "import '../../../domain.dart';",
            "",
            "part '${TM_FILENAME_BASE}.freezed.dart';",
            "",
            "@Injectable()",
            "class ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}UseCase extends BaseFutureUseCase<${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Input, ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output> {",
            "  const ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}UseCase(this._${2/(.)(.*)/${1:/downcase}$2/}Repository);",
            "",
            "  final ${2:User}Repository _${2/(.)(.*)/${1:/downcase}$2/}Repository;",
            "",
            "  @protected",
            "  @override",
            "  Future<${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output> buildUseCase(${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Input input) async {",
            "    final result = await _${2/(.)(.*)/${1:/downcase}$2/}Repository.${TM_FILENAME_BASE/(.*)_use_case/${1:/camelcase}/}();",
            "",
            "    return ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output();",
            "  }",
            "}",
            "",
            "@freezed",
            "class ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Input extends BaseInput with _$${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Input {",
            "  const factory ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Input({",
            "    required int id,",
            "  }) = _${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Input;",
            "}",
            "",
            "@freezed",
            "class ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output extends BaseOutput with _$${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output {",
            "  const ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output._();",
            "",
            "  const factory ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output({",
            "    @Default('') String xxx,",
            "  }) = _${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output;",
            "}",
            ""
        ],
        "description": "Create a BaseFutureUseCase"
    },
    "Create a BaseSyncUseCase": {
        "prefix": "suck",
        "body": [
            "import 'package:freezed_annotation/freezed_annotation.dart';",
            "import 'package:injectable/injectable.dart';",
            "",
            "import '../../../domain.dart';",
            "",
            "part '${TM_FILENAME_BASE}.freezed.dart';",
            "",
            "@Injectable()",
            "class ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}UseCase extends BaseSyncUseCase<${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Input, ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output> {",
            "  const ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}UseCase(this._${2/(.)(.*)/${1:/downcase}$2/}Repository);",
            "",
            "  final ${2:User}Repository _${2/(.)(.*)/${1:/downcase}$2/}Repository;",
            "",
            "  @protected",
            "  @override",
            "  ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output buildUseCase(${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Input input) {",
            "    final result = _${2/(.)(.*)/${1:/downcase}$2/}Repository.${TM_FILENAME_BASE/(.*)_use_case/${1:/camelcase}/}();",
            "",
            "    return ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output();",
            "  }",
            "}",
            "",
            "@freezed",
            "class ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Input extends BaseInput with _$${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Input {",
            "  const factory ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Input({",
            "    required int id,",
            "  }) = _${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Input;",
            "}",
            "",
            "@freezed",
            "class ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output extends BaseOutput with _$${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output {",
            "  const ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output._();",
            "",
            "  const factory ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output({",
            "    @Default(false) bool xxx,",
            "  }) = _${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/}Output;",
            "}",
            ""
        ],
        "description": "Create a BaseSyncUseCase"
    }
}